// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/04/2024 17:36:16"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Mod_Teste
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Mod_Teste_vlg_sample_tst(
	CLOCK_27,
	CLOCK_50,
	GPIO_0,
	GPIO_1,
	KEY,
	LCD_DATA,
	SW,
	UART_RXD,
	sampler_tx
);
input  CLOCK_27;
input  CLOCK_50;
input [35:0] GPIO_0;
input [35:0] GPIO_1;
input [3:0] KEY;
input [7:0] LCD_DATA;
input [17:0] SW;
input  UART_RXD;
output sampler_tx;

reg sample;
time current_time;
always @(CLOCK_27 or CLOCK_50 or GPIO_0 or GPIO_1 or KEY or LCD_DATA or SW or UART_RXD)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Mod_Teste_vlg_check_tst (
	GPIO_0,
	GPIO_1,
	HEX0,
	HEX1,
	HEX2,
	HEX3,
	HEX4,
	HEX5,
	HEX6,
	HEX7,
	LCD_BLON,
	LCD_DATA,
	LCD_EN,
	LCD_ON,
	LCD_RS,
	LCD_RW,
	LEDG,
	LEDR,
	UART_TXD,
	sampler_rx
);
input [35:0] GPIO_0;
input [35:0] GPIO_1;
input [0:6] HEX0;
input [0:6] HEX1;
input [0:6] HEX2;
input [0:6] HEX3;
input [0:6] HEX4;
input [0:6] HEX5;
input [0:6] HEX6;
input [0:6] HEX7;
input  LCD_BLON;
input [7:0] LCD_DATA;
input  LCD_EN;
input  LCD_ON;
input  LCD_RS;
input  LCD_RW;
input [8:0] LEDG;
input [17:0] LEDR;
input  UART_TXD;
input sampler_rx;

reg [35:0] GPIO_0_expected;
reg [35:0] GPIO_1_expected;
reg [0:6] HEX0_expected;
reg [0:6] HEX1_expected;
reg [0:6] HEX2_expected;
reg [0:6] HEX3_expected;
reg [0:6] HEX4_expected;
reg [0:6] HEX5_expected;
reg [0:6] HEX6_expected;
reg [0:6] HEX7_expected;
reg  LCD_BLON_expected;
reg [7:0] LCD_DATA_expected;
reg  LCD_EN_expected;
reg  LCD_ON_expected;
reg  LCD_RS_expected;
reg  LCD_RW_expected;
reg [8:0] LEDG_expected;
reg [17:0] LEDR_expected;
reg  UART_TXD_expected;

reg [35:0] GPIO_0_prev;
reg [35:0] GPIO_1_prev;
reg [0:6] HEX0_prev;
reg [0:6] HEX1_prev;
reg [0:6] HEX2_prev;
reg [0:6] HEX3_prev;
reg [0:6] HEX4_prev;
reg [0:6] HEX5_prev;
reg [0:6] HEX6_prev;
reg [0:6] HEX7_prev;
reg  LCD_BLON_prev;
reg [7:0] LCD_DATA_prev;
reg  LCD_EN_prev;
reg  LCD_ON_prev;
reg  LCD_RS_prev;
reg  LCD_RW_prev;
reg [8:0] LEDG_prev;
reg [17:0] LEDR_prev;
reg  UART_TXD_prev;

reg [17:0] LEDR_expected_prev;

reg [17:0] last_LEDR_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:19] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 19'b1;
end

// update real /o prevs

always @(trigger)
begin
	GPIO_0_prev = GPIO_0;
	GPIO_1_prev = GPIO_1;
	HEX0_prev = HEX0;
	HEX1_prev = HEX1;
	HEX2_prev = HEX2;
	HEX3_prev = HEX3;
	HEX4_prev = HEX4;
	HEX5_prev = HEX5;
	HEX6_prev = HEX6;
	HEX7_prev = HEX7;
	LCD_BLON_prev = LCD_BLON;
	LCD_DATA_prev = LCD_DATA;
	LCD_EN_prev = LCD_EN;
	LCD_ON_prev = LCD_ON;
	LCD_RS_prev = LCD_RS;
	LCD_RW_prev = LCD_RW;
	LEDG_prev = LEDG;
	LEDR_prev = LEDR;
	UART_TXD_prev = UART_TXD;
end

// update expected /o prevs

always @(trigger)
begin
	LEDR_expected_prev = LEDR_expected;
end



// expected LEDR[0]
initial
begin
	LEDR_expected[0] = 1'bX;
end 

// expected LEDR[1]
initial
begin
	LEDR_expected[1] = 1'bX;
end 

// expected LEDR[2]
initial
begin
	LEDR_expected[2] = 1'bX;
end 

// expected LEDR[3]
initial
begin
	LEDR_expected[3] = 1'bX;
end 

// expected LEDR[4]
initial
begin
	LEDR_expected[4] = 1'bX;
end 

// expected LEDR[5]
initial
begin
	LEDR_expected[5] = 1'bX;
end 

// expected LEDR[6]
initial
begin
	LEDR_expected[6] = 1'bX;
end 

// expected LEDR[7]
initial
begin
	LEDR_expected[7] = 1'bX;
end 
// generate trigger
always @(GPIO_0_expected or GPIO_0 or GPIO_1_expected or GPIO_1 or HEX0_expected or HEX0 or HEX1_expected or HEX1 or HEX2_expected or HEX2 or HEX3_expected or HEX3 or HEX4_expected or HEX4 or HEX5_expected or HEX5 or HEX6_expected or HEX6 or HEX7_expected or HEX7 or LCD_BLON_expected or LCD_BLON or LCD_DATA_expected or LCD_DATA or LCD_EN_expected or LCD_EN or LCD_ON_expected or LCD_ON or LCD_RS_expected or LCD_RS or LCD_RW_expected or LCD_RW or LEDG_expected or LEDG or LEDR_expected or LEDR or UART_TXD_expected or UART_TXD)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected GPIO_0 = %b | expected GPIO_1 = %b | expected HEX0 = %b | expected HEX1 = %b | expected HEX2 = %b | expected HEX3 = %b | expected HEX4 = %b | expected HEX5 = %b | expected HEX6 = %b | expected HEX7 = %b | expected LCD_BLON = %b | expected LCD_DATA = %b | expected LCD_EN = %b | expected LCD_ON = %b | expected LCD_RS = %b | expected LCD_RW = %b | expected LEDG = %b | expected LEDR = %b | expected UART_TXD = %b | ",GPIO_0_expected_prev,GPIO_1_expected_prev,HEX0_expected_prev,HEX1_expected_prev,HEX2_expected_prev,HEX3_expected_prev,HEX4_expected_prev,HEX5_expected_prev,HEX6_expected_prev,HEX7_expected_prev,LCD_BLON_expected_prev,LCD_DATA_expected_prev,LCD_EN_expected_prev,LCD_ON_expected_prev,LCD_RS_expected_prev,LCD_RW_expected_prev,LEDG_expected_prev,LEDR_expected_prev,UART_TXD_expected_prev);
	$display("| real GPIO_0 = %b | real GPIO_1 = %b | real HEX0 = %b | real HEX1 = %b | real HEX2 = %b | real HEX3 = %b | real HEX4 = %b | real HEX5 = %b | real HEX6 = %b | real HEX7 = %b | real LCD_BLON = %b | real LCD_DATA = %b | real LCD_EN = %b | real LCD_ON = %b | real LCD_RS = %b | real LCD_RW = %b | real LEDG = %b | real LEDR = %b | real UART_TXD = %b | ",GPIO_0_prev,GPIO_1_prev,HEX0_prev,HEX1_prev,HEX2_prev,HEX3_prev,HEX4_prev,HEX5_prev,HEX6_prev,HEX7_prev,LCD_BLON_prev,LCD_DATA_prev,LCD_EN_prev,LCD_ON_prev,LCD_RS_prev,LCD_RW_prev,LEDG_prev,LEDR_prev,UART_TXD_prev);
`endif
	if (
		( LEDR_expected_prev[0] !== 1'bx ) && ( LEDR_prev[0] !== LEDR_expected_prev[0] )
		&& ((LEDR_expected_prev[0] !== last_LEDR_exp[0]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR_expected_prev);
		$display ("     Real value = %b", LEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_LEDR_exp[0] = LEDR_expected_prev[0];
	end
	if (
		( LEDR_expected_prev[1] !== 1'bx ) && ( LEDR_prev[1] !== LEDR_expected_prev[1] )
		&& ((LEDR_expected_prev[1] !== last_LEDR_exp[1]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR_expected_prev);
		$display ("     Real value = %b", LEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_LEDR_exp[1] = LEDR_expected_prev[1];
	end
	if (
		( LEDR_expected_prev[2] !== 1'bx ) && ( LEDR_prev[2] !== LEDR_expected_prev[2] )
		&& ((LEDR_expected_prev[2] !== last_LEDR_exp[2]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR_expected_prev);
		$display ("     Real value = %b", LEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_LEDR_exp[2] = LEDR_expected_prev[2];
	end
	if (
		( LEDR_expected_prev[3] !== 1'bx ) && ( LEDR_prev[3] !== LEDR_expected_prev[3] )
		&& ((LEDR_expected_prev[3] !== last_LEDR_exp[3]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR_expected_prev);
		$display ("     Real value = %b", LEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_LEDR_exp[3] = LEDR_expected_prev[3];
	end
	if (
		( LEDR_expected_prev[4] !== 1'bx ) && ( LEDR_prev[4] !== LEDR_expected_prev[4] )
		&& ((LEDR_expected_prev[4] !== last_LEDR_exp[4]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR_expected_prev);
		$display ("     Real value = %b", LEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_LEDR_exp[4] = LEDR_expected_prev[4];
	end
	if (
		( LEDR_expected_prev[5] !== 1'bx ) && ( LEDR_prev[5] !== LEDR_expected_prev[5] )
		&& ((LEDR_expected_prev[5] !== last_LEDR_exp[5]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR_expected_prev);
		$display ("     Real value = %b", LEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_LEDR_exp[5] = LEDR_expected_prev[5];
	end
	if (
		( LEDR_expected_prev[6] !== 1'bx ) && ( LEDR_prev[6] !== LEDR_expected_prev[6] )
		&& ((LEDR_expected_prev[6] !== last_LEDR_exp[6]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR_expected_prev);
		$display ("     Real value = %b", LEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_LEDR_exp[6] = LEDR_expected_prev[6];
	end
	if (
		( LEDR_expected_prev[7] !== 1'bx ) && ( LEDR_prev[7] !== LEDR_expected_prev[7] )
		&& ((LEDR_expected_prev[7] !== last_LEDR_exp[7]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR_expected_prev);
		$display ("     Real value = %b", LEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_LEDR_exp[7] = LEDR_expected_prev[7];
	end
	if (
		( LEDR_expected_prev[8] !== 1'bx ) && ( LEDR_prev[8] !== LEDR_expected_prev[8] )
		&& ((LEDR_expected_prev[8] !== last_LEDR_exp[8]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR_expected_prev);
		$display ("     Real value = %b", LEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_LEDR_exp[8] = LEDR_expected_prev[8];
	end
	if (
		( LEDR_expected_prev[9] !== 1'bx ) && ( LEDR_prev[9] !== LEDR_expected_prev[9] )
		&& ((LEDR_expected_prev[9] !== last_LEDR_exp[9]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR_expected_prev);
		$display ("     Real value = %b", LEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_LEDR_exp[9] = LEDR_expected_prev[9];
	end
	if (
		( LEDR_expected_prev[10] !== 1'bx ) && ( LEDR_prev[10] !== LEDR_expected_prev[10] )
		&& ((LEDR_expected_prev[10] !== last_LEDR_exp[10]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR_expected_prev);
		$display ("     Real value = %b", LEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_LEDR_exp[10] = LEDR_expected_prev[10];
	end
	if (
		( LEDR_expected_prev[11] !== 1'bx ) && ( LEDR_prev[11] !== LEDR_expected_prev[11] )
		&& ((LEDR_expected_prev[11] !== last_LEDR_exp[11]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR_expected_prev);
		$display ("     Real value = %b", LEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_LEDR_exp[11] = LEDR_expected_prev[11];
	end
	if (
		( LEDR_expected_prev[12] !== 1'bx ) && ( LEDR_prev[12] !== LEDR_expected_prev[12] )
		&& ((LEDR_expected_prev[12] !== last_LEDR_exp[12]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR_expected_prev);
		$display ("     Real value = %b", LEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_LEDR_exp[12] = LEDR_expected_prev[12];
	end
	if (
		( LEDR_expected_prev[13] !== 1'bx ) && ( LEDR_prev[13] !== LEDR_expected_prev[13] )
		&& ((LEDR_expected_prev[13] !== last_LEDR_exp[13]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR_expected_prev);
		$display ("     Real value = %b", LEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_LEDR_exp[13] = LEDR_expected_prev[13];
	end
	if (
		( LEDR_expected_prev[14] !== 1'bx ) && ( LEDR_prev[14] !== LEDR_expected_prev[14] )
		&& ((LEDR_expected_prev[14] !== last_LEDR_exp[14]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR_expected_prev);
		$display ("     Real value = %b", LEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_LEDR_exp[14] = LEDR_expected_prev[14];
	end
	if (
		( LEDR_expected_prev[15] !== 1'bx ) && ( LEDR_prev[15] !== LEDR_expected_prev[15] )
		&& ((LEDR_expected_prev[15] !== last_LEDR_exp[15]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR_expected_prev);
		$display ("     Real value = %b", LEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_LEDR_exp[15] = LEDR_expected_prev[15];
	end
	if (
		( LEDR_expected_prev[16] !== 1'bx ) && ( LEDR_prev[16] !== LEDR_expected_prev[16] )
		&& ((LEDR_expected_prev[16] !== last_LEDR_exp[16]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR_expected_prev);
		$display ("     Real value = %b", LEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_LEDR_exp[16] = LEDR_expected_prev[16];
	end
	if (
		( LEDR_expected_prev[17] !== 1'bx ) && ( LEDR_prev[17] !== LEDR_expected_prev[17] )
		&& ((LEDR_expected_prev[17] !== last_LEDR_exp[17]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR_expected_prev);
		$display ("     Real value = %b", LEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_LEDR_exp[17] = LEDR_expected_prev[17];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Mod_Teste_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLOCK_27;
reg CLOCK_50;
reg [35:0] treg_GPIO_0;
reg [35:0] treg_GPIO_1;
reg [3:0] KEY;
reg [7:0] treg_LCD_DATA;
reg [17:0] SW;
reg UART_RXD;
// wires                                               
wire [35:0] GPIO_0;
wire [35:0] GPIO_1;
wire [0:6] HEX0;
wire [0:6] HEX1;
wire [0:6] HEX2;
wire [0:6] HEX3;
wire [0:6] HEX4;
wire [0:6] HEX5;
wire [0:6] HEX6;
wire [0:6] HEX7;
wire LCD_BLON;
wire [7:0] LCD_DATA;
wire LCD_EN;
wire LCD_ON;
wire LCD_RS;
wire LCD_RW;
wire [8:0] LEDG;
wire [17:0] LEDR;
wire UART_TXD;

wire sampler;                             

// assign statements (if any)                          
assign GPIO_0 = treg_GPIO_0;
assign GPIO_1 = treg_GPIO_1;
assign LCD_DATA = treg_LCD_DATA;
Mod_Teste i1 (
// port map - connection between master ports and signals/registers   
	.CLOCK_27(CLOCK_27),
	.CLOCK_50(CLOCK_50),
	.GPIO_0(GPIO_0),
	.GPIO_1(GPIO_1),
	.HEX0(HEX0),
	.HEX1(HEX1),
	.HEX2(HEX2),
	.HEX3(HEX3),
	.HEX4(HEX4),
	.HEX5(HEX5),
	.HEX6(HEX6),
	.HEX7(HEX7),
	.KEY(KEY),
	.LCD_BLON(LCD_BLON),
	.LCD_DATA(LCD_DATA),
	.LCD_EN(LCD_EN),
	.LCD_ON(LCD_ON),
	.LCD_RS(LCD_RS),
	.LCD_RW(LCD_RW),
	.LEDG(LEDG),
	.LEDR(LEDR),
	.SW(SW),
	.UART_RXD(UART_RXD),
	.UART_TXD(UART_TXD)
);

// SW[0]
initial
begin
	SW[0] = 1'b0;
end 

// SW[1]
initial
begin
	SW[1] = 1'b0;
end 

// SW[2]
initial
begin
	SW[2] = 1'b0;
end 

// SW[3]
initial
begin
	SW[3] = 1'b0;
end 

// SW[4]
initial
begin
	SW[4] = 1'b1;
end 

// SW[5]
initial
begin
	SW[5] = 1'b1;
end 

// SW[6]
initial
begin
	SW[6] = 1'b1;
end 

// SW[7]
initial
begin
	SW[7] = 1'b1;
end 

// SW[8]
initial
begin
	SW[8] = 1'b1;
end 

// SW[9]
initial
begin
	SW[9] = 1'b1;
end 

// SW[10]
initial
begin
	SW[10] = 1'b1;
end 

// SW[11]
initial
begin
	SW[11] = 1'b1;
end 

// SW[12]
initial
begin
	SW[12] = 1'b0;
end 

// SW[13]
initial
begin
	SW[13] = 1'b0;
end 

// SW[14]
initial
begin
	SW[14] = 1'b0;
end 

// SW[15]
initial
begin
	SW[15] = 1'b0;
end 

// SW[17]
initial
begin
	repeat(6)
	begin
		SW[17] = 1'b0;
		SW[17] = #80000 1'b1;
		# 80000;
	end
	SW[17] = 1'b0;
end 

Mod_Teste_vlg_sample_tst tb_sample (
	.CLOCK_27(CLOCK_27),
	.CLOCK_50(CLOCK_50),
	.GPIO_0(GPIO_0),
	.GPIO_1(GPIO_1),
	.KEY(KEY),
	.LCD_DATA(LCD_DATA),
	.SW(SW),
	.UART_RXD(UART_RXD),
	.sampler_tx(sampler)
);

Mod_Teste_vlg_check_tst tb_out(
	.GPIO_0(GPIO_0),
	.GPIO_1(GPIO_1),
	.HEX0(HEX0),
	.HEX1(HEX1),
	.HEX2(HEX2),
	.HEX3(HEX3),
	.HEX4(HEX4),
	.HEX5(HEX5),
	.HEX6(HEX6),
	.HEX7(HEX7),
	.LCD_BLON(LCD_BLON),
	.LCD_DATA(LCD_DATA),
	.LCD_EN(LCD_EN),
	.LCD_ON(LCD_ON),
	.LCD_RS(LCD_RS),
	.LCD_RW(LCD_RW),
	.LEDG(LEDG),
	.LEDR(LEDR),
	.UART_TXD(UART_TXD),
	.sampler_rx(sampler)
);
endmodule

